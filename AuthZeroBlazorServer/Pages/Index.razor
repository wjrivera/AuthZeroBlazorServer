@page "/"
@attribute [Authorize(Roles = "normal.user,admin.user")]

<h1>Welcome, @_username!</h1>

<br/>
<h3>Info</h3>
<ul>
    <li>Auth0 ID: @_authId</li>
    <li>Nickname: @_nickname</li>
    <li>Email: @_email</li>
    <li>Verified: @(_emailVerified ? "Yes" : "No")</li>
</ul>

<br/>
<h3>Claims</h3>
<ol>
    @foreach (var claim in Claims)
    {
        <li>@claim</li>
    }
</ol>

<br/>
<h3>Image</h3>
<img src="@_picture">

@code
{
    [Inject]
    public AuthenticationStateProvider AuthState { get; set; }

    private string _username = "Anonymous Username";
    private string _email = "Anonymous Email";
    private string _nickname = "Anonymous Nickname";
    private bool _emailVerified = false;
    private string _authId = "none";
    private string _picture = "";

    public readonly List<string> Claims = new ();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        
        foreach (var claims in state.User.Claims)
        {
            Claims.Add($"{claims.Type}: {claims.Value}");
        }

        _username = state.User.Claims
            .Where(c => c.Type.Equals("name"))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;

        _email = state.User.Claims
            .Where(c => c.Type.Contains("emailaddress"))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;

        _nickname = state.User.Claims
            .Where(c => c.Type.Equals("nickname"))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;

        _emailVerified = state.User.Claims
            .Where(c => c.Type.Equals("email_verified"))
            .Select(c => c.Value)
            .FirstOrDefault() == "true";

        _authId = state.User.Claims
            .Where(c => c.Type.Contains("nameidentifier"))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;

        _picture = state.User.Claims
            .Where(c => c.Type.Equals("picture"))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;

        await base.OnInitializedAsync();
    }
}